plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "minihudextra-common.mixins.json"
        mixinConfig "minihudextra.forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${forge_minecraft_version}-${forge_version}"
    modApi "dev.architectury:architectury-forge:${forge_architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi 'curse.maven:bocchud-916504:5068969' // 0.1.2-mc1.20.1
    modApi 'curse.maven:ftb-library-404465:5051953' // forge-2001.1.5
    modApi 'curse.maven:ftb-ultimine-386134:5005006' // forge-2001.1.4
    modApi 'curse.maven:mafglib-910766:5068815' // 0.1.8-mc1.20.1
    modApi 'curse.maven:mekanism-268560:5125665' // 1.20.1-10.4.6.20
    modApi 'curse.maven:mekanism-generators-268566:5125668' // 1.20.1-10.4.6.20
    modApi 'curse.maven:serene-seasons-291874:4761603' // 1.20.1-9.0.0.46
    modApi 'maven.modrinth:blood-magic:3.3.2-44' // 1.20.1-3.3.2-44
    modApi 'curse.maven:patchouli-306770:4966125' // 1.20.1-84-FORGE
    modApi 'curse.maven:mcjtylib-233105:4747680' // 1.20-8.0.3
    modApi 'curse.maven:rftools-base-326041:4747681' // 1.20-5.0.2
    modApi 'curse.maven:deep-resonance-233398:4979927' // 1.20-5.0.3
//    modApi 'curse.maven:natures-aura-306626:4963590' // 39.4 // 映射继续出问题
//    modApi 'de.ellpeck.naturesaura:NaturesAura:39.4' // maven 继续死
    modApi files('libs/NaturesAura-39.4-api.jar')
}

processResources {
    var replaceProperties = [
            forge_version: forge_version, forge_version_range: forge_version_range,
            forge_loader_version_range: forge_loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description, mod_repo: mod_repo,
            architectury_dependency: architectury_dependency, forge_bocchud_dependency: forge_bocchud_dependency
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
    }
}
